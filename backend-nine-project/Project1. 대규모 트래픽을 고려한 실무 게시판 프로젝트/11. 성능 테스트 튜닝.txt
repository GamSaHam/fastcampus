성능 테스트 리팩토링 - 아키텍처

Scale Out AWS 로드 벨런서를 사용하여 애플리케이션을 여러 서버로 분산합니다. 트래픽을 균형있게 분배하고 고가용성을 제공하는데 도움이 됩니다.

분산 시스템 아키텍처: 마이크로서비스 아키텍처를 고려하여 각 부분을 독립적으로 스케일 아웃하고, 확장성을 제공합니다.

서버 리소스 최적화: 서버 리소스(CPU, 메모리, 디스크) 를 최적화하고 운영체제 및 웹 서버 설정을 튜닝합니다.

성능 테스트 리팩토리 - 어플리케이션

캐싱 활용: 게시물 목록, 사용자 프로필, 이미지 등 자주 접근하는 데이터를 캐시합니다. Ehcache, Redis, 또는 기타 캐싱 솔루션을 사용하여 성능을 향상
시킬 수 있습니다.

비동기 프로그래밍: Spring의 비동기 서비스 및 메시징을 활용하여 요청과 응답을 병렬로 처리하고 병목 현상을 줄입니다.

알고리즘 및 비즈니스 로직 최적화: 비즈니스 로직에서 성능에 영향을 미치는 부분을 개선하고, 불필요한 반복 작업을 최소화합니다.

성능 테스트 리펙토링 - 데이터베이스
실행계획을 통한 쿼리 최적화: 데이터베이스 쿼리를 검토하고 복잡한 쿼리를 최적화합니다. 인덱스, 조인, 서브쿼리 등을 개선하여 데이터베이스 성능을
향상시킵니다. 데이터베이스 실행 계획을 확인하고 병목 현상을 식별하여 인덱스 또는 조인을 추가하거나 변경합니다.

인덱스 최적화: 자주 검색되는 열에 적잘한 인덱스를 생성합니다. 복합 인덱스를 고려하여 검색 속도를 높입니다.
카디널리티 항목 참조

데이터베이스 분리: 데이터베이스를 읽기 전용과 쓰기 전용으로 분리하여 읽기 작업에 대한 부하를 줄입니다.

데이터 정규화 및 역정규화: 데이터베이스 정규화를 통해 데이터 중복을 최소화하고 역정규화를 통해 읽기 성능을 항상시킵니다.

성능 테스트 결과 확인 - Stress Test
Number of users (peak concurrency): 500
Spawn rate (users started/second): 50
테스트 목표 500 TPS 목표(CPU 50% 이하)
서버 스팩: (4Core, 16GB Memory)
시간: 5분

최종 결과: 초당 평균 94TPS, 평균 CPU: 70.2%
개발 대역 서버가 라이브 성능의 1/5라 가정시 초당 470 처리
리팩토링 부분: mysqld cpu가 70% 넘으므로 DB 리팩토링
(개발대역 스펙: CPU:i5 8세대, 메모리: 16GB, 디스크: 500GB)

성능 테스트 결과 확인 - Spike Test
Number of users (peak concurrency): 1000
Spawn rate (usrs started/second): 50
테스트 목표 500 TPS목표 (CPU 50% 이하)
서버 스펙:(4Core, 16GB Memory)
시간: 5분

최종 결과: 초당 평균 98.6TPS, 평균 CPU:79.1%
개발 대역 서버가 라이브 성능의 1/5라 가정시 초당 490 처리
리펙토링 부분: mysqld cpu가 70% 넘으므로 DB 리팩토링

explain select *
from post
where 1 = 1
and name like '테스트%'
and categoryId = 1
order by createTime desc;

id, select_type, table, partitions, type, possible_keys, key, key_len, ref,, rows, filtered, Extra
1,SIMPLE,post,,ref,FK_Post_categoryId_Category_id,FK_Post_categoryId_Category_id,5,const,2062,11.11,Using index condition; Using where; Using filesort

rows: 2062
filtered: 11.11
MySQL 엔진에 의해 필터링되어 제거된 레코드는 제외하고 최종적으로 로코드가 얼마나 남았는지 비율이 표시된다.

스토리지 엔진이 전체 2062건의 레코드를 읽어서 MySQL 엔진에 전달했는데, MySQL 엔진에서 필터링 되고 11%만 남았다는 것을 의미한다.

2062건중 11% 인덱스를 태웠다는 것을 의미한다.
필터링 구문이 높아야 좋은 것이다.

DB 리팩토링 후 성능 테스트 결과 확인
Number of users(peak concurrency): 500
Spawn rate (users started/second): 50
테스트 목표 500 TPS 목표(CPU 50% 이하)
서버 스펙(4Core, 16GB Memory)

최종 결과: 초당 평균 311TPS, 평균 CPU:2.2%
개발 대역 서버가 라이브 성능 1/5라 가정시 초당 1555 처리 리팩토리 부분 x

성능 테스트 결과 확인 - Endurance Test
Number of users (peak concurrency): 100
Spawn rate (users started/second): 100
테스트 목표 500TPS 목표 (CPU 50% 이하)
서버 스팩:(4Core, 16GB Memory)

최종 결과: 초당 평균 66.TPS, 평균 CPU: 42.8%
개발 대역 서버가 라이브 성능의 1/5라 가정시 초당 330
리팩토리 부분: CPU는 안정적이나 TPS가 낮음으로 어플리케이션 Redis 부분 리펙토링

어플리케이션 리팩토링 후 성능 테스트 결과 확인
Number of users (peak concurrency): 100
Spawn rate (users stated/second): 100
서버 스펙: (4Core, 16GB Memory)
시간: 10분

최종 결과: 초당 평균80.7TPS, 평균 CPU:0% 개발 대역 서버가 라이브 성능의 1/5라 가정시 초당 400
리팩토링 부분: x

# 리팩 토링 실습 구문에서 
name 항목 인덱스를 추가 하였으나 like % 앞에 구문을 제외한 구문이므로 기능적 구문에 맞지 않아서 적용 제외 처리 진행


애플리케이션 Redis 항목 추가 expired time 증가로 인해 기존 80TPS 항목에서 311TPS 로 항상된것을 확인할 수 있다.
메모리와, CPU 항목도 확인해서 결과를 알려주었다.


















