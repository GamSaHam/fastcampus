성능 테스트 해당 어플리케이션의 성능, 확장성 및 안정성을 평가하는 과정
부하 처리 능력, 응답 시간, 처리량 및 자원 사용량 같은 성능 관련 지표를 측정하여 어플리케이션이 예상된 작업 부하 아래에서 어떻게 수행되는지 이해하는 데 도움을 준다.

스트레스 테스트(Stress Test): 스트레스 테스트는 어플리케이션을 최대 부하에서 테스트하는 과정을 의미합니다. 이 테스트에서는 어플리케이션의 성능 한계를 확인하고 어플리
케이션의 부하 처리 능력을 평가합니다. 대량의 동시 사용자 또는 트랜잭션을 생성하여 어플리케이션의 응답 시간과 자원 사용량을 모니터링 합니다. 스트레스 테스트에서 어플
리케이션이 어떻게 실패하는지, 예를 들어 응답 시간이 급격하게 증가하는 등의 현상을 파악합니다.

스파이크 테스트(Spike Test): 갑작스로운 부하 증가에 대한 어플리케이션의 대응 능력을 테스트하는 것입니다. 예를 들어, 특정 이벤트나 광고 캠페인으로 인해 갑자기 많은
사용자가 어플리케이션에 액세스하는 시나리오를 시뮬레이션합니다. 스파이크 테스트는 어플리케이션이 갑자스러운 부하 증가에 어떻게 반응하고, 부하가 정상 수준으로 돌아올
때까지 얼마나 시간이 걸리는지를 확인합니다.

언더런스 테스트(Endurance Test): 인더러스 테스트는 어플리케이션을 장기간 실행하는 테스트로, 지속적으로 부하를 가하거나 특정 부하를 유지하는 시나리오에서
어플리케이션의 안정성을 확인합니다. 이 테스트는 어플리케이션의 장기적인 안정성, 메모리 누수, 자원 누수 등을 검증하는데 사용됩니다. 인더러스 테스트를 통해 장시간
실행중에 어플리케이션이 성능 저하나 시스템 장애를 경험하지 않는지 확인할 수 있습니다.

성능 테스트 툴
1. Locust:
장점: Python 언어로 개발되어 사용자 정의 가능한 스크립트 작성이 쉽습니다. 분산된 테스트를 지원하며, 테스트 시나리오를 프로그래밍하여 동적인 부하를 생성할 수 있다.
웹 기반 대시보드를 통해 실시간 결과 모니터링이 가능합니다.
단점: 분석 및 보고 기능이 제한적이며, 다른 도구에 비해 고급 분석 능력이 부족할 수 있습니다. 

2. Apache JMeter 장점: 다양한 프로토콜 및 응용 프로그램 테스트를 지원합니다. 대규모 테스트 및 복잡한 시나리오에 적합하며, 다양한 플러그인을 활용하여 확장이 가능
합니다.
단점: 사용자 인터페이스가 다소 복잡하며, 초기 설정 및 스크립트 작성이 다른 도구에 비해 어려울 수 있습니다.

3. Getling 장점: Scala 언어를 사용하여 사용자 정의 가능한 시나리오를 구성합니다. 비동기 작업 및 스트리밍 시나리오를 지원하므로 현대적인 웹 애플리케이션에 적합합니다.
단점: 스크립트 작성 및 설정이 다른 도구에 비해 어려울 수 있습니다. JMeter와 Locust에 비해 확장성이 떨어 질 수 있습니다.

성능 테스트 시나리오 - Stress Test

목표: 게시판 검색 API 의 TPS를 일정 주기적(패턴)으로 부하를 줘서 프로그램 정상 가동 여부 테스트
사용자 수: 500
게시글 수: 10만
웹 서버 주소: 게시판 검색 API 엔드포인트 URL
요청 메서드: POST
테스트: 5분
시나리오:
BODY: 용량(검색 조건) 초당 500번을 호출하여 분당 사용자를 50씩 늘려 5분 동안 테스트 후 서버의 지표를 확인

성능 테스트 시나리오 - Spike Test
목표: 게시판 검색 API의 TPS가 1000으로 즉각적으로 상승했을 때 시스템의 대응을 테스트
사용자 수: 1000
게시글 수: 10만
..
시나리오:
BODY의 용량(검색 조건) 초당 100번을 호출하여 초당 사용자를 100씩 늘려 5분동안 테스트 후 서버의 지표를 확인

성능 테스트 시나리오 - Endurance Test
목표: 게시판 검색 API의 TPS를 장시간 동안 시스템이 얼마나 안정적으로 동작할 수 있는지를 확인
사용자 수: 100
시나리오:
100명의 동시 사용자가 호출하였을때 10분동안 서버의 지표 CPU, RAM, DISK, TPS가 이상이 있는지 테스트






