Rest API 규칙

REST(Representational State Transfer) APO는 웹 기반의 리소스를 관리하고 상태를 전달하기 위한 표준화된 방법을 제공하는 아키텍쳐 스타일입니다.

명명규칙 (Naming Conventions): 리소스는 명사로 표현하며, 복수형으로 사용합니다. 예: /users, /products
리소스에 대한 행위(액션)는 Http 메소드로 표현합니다. 예: GET /users (리소스 조회), POST /users (리소스 생성)
URI(Uniform Resource Identifier): 각 리소스는 고유한 URI를 가져야 합니다. URI는 리소스의 계층 구조를 나타내며, 명확하고 직관적으로 이해할 수 있어야
합니다

HTTP 메소드 활용 
GET: 리소스 조회
, POST: 새로운 리소스 생성
, PUT: 리소스 전체 수정 또는 리소스 없으면 생성
, PATCH: 리소스의 일부 생성, DELETE: 리소스 삭제

스테이트리스(Stateless) 통신: 각 요청은 모든 필요한 정보를 포함하고 있어야 하며, 서버는 클라이언트의 상태를 저장하지 않습니다.
Representation을 통한 통신: 클라이언트와 서버 간의 통신은 리소스의 표현(Representation)을 통해 이루어 집니다. JSON, XML 등을 사용될 수 있습니다.
해더(Header) 활용: 헤더를 사용하여 메타데이터를 전달하고나, 캐싱, 인증, 인가 등의 정보를 처리합니다.
HTTP 상태 코드 활용: 적절한 HTTP 상태 코드를 반환하여 요청의 결과를 표현합니다.
(예: 200 OK, 201 Created, 400 Bad Request, 404 Not Found, 500 Internal Server Error 등)

// ===================== 

DTO와 공통 Response

DTO(Data Transfer Object):
DTO는 서비스 간 데이터 전달을 위한 객체로, 클라이언트와 서버 간의 데이터 전송에 사용됩니다. 
주로 비지니스 로직을 포함하지 않고, 데이터만 보유하고 있는 POJO(Plain Old Java Object)로 구성됩니다.

public class UserDTO {
    private Long id;
    private String username;
    private String email;
}

공통 Response 클래스:
공통 Response 클래스는 API 응답의 일관된 형식을 정의하여 클라이언트에게 통일된 응답을 제공합니다. 
이를 통해 클라이언트는 일관된 구조로 응답을 처리할 수 있습니다.

public class ApiResponse<T> {
    private int status;
    private String message;
    private T data;
}

// ##########

Log4j2와 로깅 전략
5단계
TRACE, DEBUG, INFO, WARN, ERORR 레벨이 있다.

// ##########

예외처리 전략 탐구 및 개발

@ControllerAdvice 어노테이션을 사용하여 예외를 전역적으로 처리할 수 있는 컴퍼넌트를 생성할 수 있습니다.




